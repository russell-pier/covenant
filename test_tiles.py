#!/usr/bin/env python3
"""
Test script to verify tile configuration is working correctly
"""

def test_tile_configuration():
    """Test that all required tiles are properly configured"""
    try:
        from src.tiles import get_tile_registry
        
        # Get the tile registry
        registry = get_tile_registry()
        print("✅ Tile registry loaded successfully")
        
        # Check for required tiles
        required_tiles = ["stone", "land", "water", "loading"]
        
        print("\n🔍 Checking required tiles:")
        for tile_type in required_tiles:
            if registry.has_tile(tile_type):
                config = registry.get_tile_config(tile_type)
                print(f"  ✅ {tile_type}: '{config.character}' bg={config.background_color}")
            else:
                print(f"  ❌ {tile_type}: MISSING")
        
        # Test getting a missing tile (should fail hard)
        try:
            missing_config = registry.get_tile_config("nonexistent")
            print(f"\n❌ ERROR: Missing tile should have failed but got: '{missing_config.character}'")
        except KeyError as e:
            print(f"\n✅ Missing tile test: Correctly failed with {e}")

        # Test the world generation tile types
        print("\n🌍 Testing world generation compatibility:")
        world_tile_types = ["land", "water"]  # These are generated by lands_and_seas layer

        for tile_type in world_tile_types:
            try:
                config = registry.get_tile_config(tile_type)
                print(f"  ✅ {tile_type}: Properly configured")
            except KeyError:
                print(f"  ❌ {tile_type}: Not configured - system will fail")
        
        print("\n🎉 Tile configuration test completed!")
        return True
        
    except Exception as e:
        print(f"❌ Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_tile_configuration()
